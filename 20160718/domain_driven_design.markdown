Title: Domain Driven Design
Notebook: Business
Tags: evnd, code, microservice

[TOC]

- 领域模型:
 >很多因素会使软件开发复杂化，但最根本的原因是问题领域本身的错综复杂，然而开发软件无法回避这种这种复杂度，所以只能做的只用控制这种复杂度。控制复杂性最关键的是有一个很好的领域模型。

 >领域建模过程不应将概念与实现割裂开。

 > 不应该先设计，在构建(先建模，后实现)强大的领域模型是随着时间演进的

 > 官僚主义、目标不清、资源缺乏等都会导致项目偏离轨道，但是真正决定软件复杂度的是设计方法，一些设计因素是技术上的，大部分软件最主要的复杂度不在技术上，而是在领域本身、用户的活动或业务。

 >领域驱动设计的实质就是消化吸收大量知识，最后产生一个反映深层次领域知识并聚焦于关键概念的模型。这是领域专家和开发人员协作过程，经过开发迭代把这种协作贯穿到整个项目的生命周期。

 >模型是一种简化，对现实的解释，把与解决问题密切相关的方面抽象出来而忽略无关的细节。

 >执行用户的模型活动或满足用户的某种需求，用户的问题区域就是软件的领域，软件领域一般与计算机关系不大。

 >模型是解决信息超载问题的工具、模型这种知识形式对知识进行了选择性的简化和有意的结构化，适当的模型可以使人理解信息的意义，并专注于问题。是一种选择性的抽象。

 >业务活动和规则如同涉及的实体一样，都是领域的核心。

 >如果没有统一的公共语言，则会导致开发->开发 开发->领域专家 不同团队间不能浑然一体，模型的知识和想法无法结合到一起。

 >如果语言支离破碎，项目必将遇到严重问题，一个概念被翻译来翻译去，弱化了知识的消化，对领域不能深刻理解，无法记录到文档或代码。翻译和误解的开销成本很高。

 > 开发人员应该基于模型的语言来描述系统中的工件，任务和功能。并且领域专家基于这个相互交流，讨论需求、开发计划和特性。

 >对领域的抽象，开发人员怎么判断抽象的是否合理，是否像领域专家样深入理解领域。

 >细节过多的结果是“只见树木，不见森林”。

 >设计中的重要细节应该在代码中提现出来，良好的实现应该是透明的。

 >项目文档应该是对代码的一种补充，必须深入到各种项目活动中，把文档减少至最少。

 >好的编程风格尽力是变量、代码组织方式、方法名应可能的严格，使这种联系直接化。

 >

 >

 >

 >

 >

 >

 >
- [Surviving Object-Oriented Projects](敏捷开发&XP)
